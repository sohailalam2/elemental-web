import{_ as s}from"./chunks/stateful-component-example.4cc52498.js";import{_ as a,c as n,o as l,a as p}from"./app.2753a8df.js";const u=JSON.parse('{"title":"Stateful Component","description":"","frontmatter":{},"headers":[],"relativePath":"elemental-component/component/7-stateful-component.md"}'),e={name:"elemental-component/component/7-stateful-component.md"},o=p(`<h1 id="stateful-component" tabindex="-1">Stateful Component <a class="header-anchor" href="#stateful-component" aria-hidden="true">#</a></h1><h2 id="elementalcomponentstate" tabindex="-1">ElementalComponentState <a class="header-anchor" href="#elementalcomponentstate" aria-hidden="true">#</a></h2><p><code>ElementalComponentState</code> is a class that provides a state management capabilities to <code>StatefulElementalComponent</code>. The states are represented as <a href="https://abu.sohailalam.in/data-helpers/value-object/index" target="_blank" rel="noreferrer">ValueObjects</a>.</p><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">hasValue</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">ValueObject</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;@sohailalam2/abu&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">ElementalComponentState</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">StateIsNotConsistentException</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;@sohailalam2/elemental-web&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">interface</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">HeroMessage</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">message</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">State</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ElementalComponentState</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">HeroMessage</span><span style="color:#E6E6E6;">&gt; {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">static</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">defaultState</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">Type</span><span style="color:#E6E6E6;">, </span><span style="color:#4EC9B0;">K</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">Type</span><span style="color:#E6E6E6;">&gt;&gt;()</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">K</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#C586C0;">return</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">State</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">({ </span><span style="color:#9CDCFE;">name:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;unknown&#39;</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">message:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;unknown&#39;</span><span style="color:#E6E6E6;"> }) </span><span style="color:#C586C0;">as</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">K</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#DCDCAA;">validate</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#569CD6;">super</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">validate</span><span style="color:#E6E6E6;">();</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">isConsistent</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">hasValue</span><span style="color:#E6E6E6;">(</span><span style="color:#569CD6;">this</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">) </span><span style="color:#D4D4D4;">&amp;&amp;</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">hasValue</span><span style="color:#E6E6E6;">(</span><span style="color:#569CD6;">this</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#E6E6E6;">) </span><span style="color:#D4D4D4;">&amp;&amp;</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">hasValue</span><span style="color:#E6E6E6;">(</span><span style="color:#569CD6;">this</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">message</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#C586C0;">if</span><span style="color:#E6E6E6;"> (</span><span style="color:#D4D4D4;">!</span><span style="color:#9CDCFE;">isConsistent</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#E6E6E6;">      </span><span style="color:#C586C0;">throw</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">new</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">StateIsNotConsistentException</span><span style="color:#E6E6E6;">(</span><span style="color:#569CD6;">this</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">constructor</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light" tabindex="0"><code><span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> { </span><span style="color:#2F86D2;">hasValue</span><span style="color:#002339;">, </span><span style="color:#2F86D2;">ValueObject</span><span style="color:#002339;"> } </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;@sohailalam2/abu&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> { </span><span style="color:#2F86D2;">ElementalComponentState</span><span style="color:#002339;">, </span><span style="color:#2F86D2;">StateIsNotConsistentException</span><span style="color:#002339;"> } </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;@sohailalam2/elemental-web&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">interface</span><span style="color:#002339;"> </span><span style="color:#0444AC;">HeroMessage</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">name</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">message</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">State</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ElementalComponentState</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">HeroMessage</span><span style="color:#002339;">&gt; {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">static</span><span style="color:#002339;"> </span><span style="color:#7EB233;">defaultState</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">Type</span><span style="color:#002339;">, </span><span style="color:#0444AC;">K</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ValueObject</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">Type</span><span style="color:#002339;">&gt;&gt;()</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">K</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">State</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">({ name: </span><span style="color:#A44185;">&#39;unknown&#39;</span><span style="color:#002339;">, message: </span><span style="color:#A44185;">&#39;unknown&#39;</span><span style="color:#002339;"> }) </span><span style="color:#7B30D0;">as</span><span style="color:#002339;"> </span><span style="color:#0444AC;">K</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#7EB233;">validate</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">super</span><span style="color:#002339;">.</span><span style="color:#7EB233;">validate</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">isConsistent</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7EB233;">hasValue</span><span style="color:#002339;">(</span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">value</span><span style="color:#002339;">) </span><span style="color:#7B30D0;">&amp;&amp;</span><span style="color:#002339;"> </span><span style="color:#7EB233;">hasValue</span><span style="color:#002339;">(</span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">value</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">name</span><span style="color:#002339;">) </span><span style="color:#7B30D0;">&amp;&amp;</span><span style="color:#002339;"> </span><span style="color:#7EB233;">hasValue</span><span style="color:#002339;">(</span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">value</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">message</span><span style="color:#002339;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#2F86D2;">isConsistent</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">      </span><span style="color:#7B30D0;">throw</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">StateIsNotConsistentException</span><span style="color:#002339;">(</span><span style="color:#000000;">this</span><span style="color:#002339;">.constructor.</span><span style="color:#2F86D2;">name</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">  }</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="class-signature" tabindex="-1">Class Signature <a class="header-anchor" href="#class-signature" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ElementalComponentState</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#E6E6E6;">&gt; </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#E6E6E6;">&gt; {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">static</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">defaultState</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">Type</span><span style="color:#E6E6E6;">, </span><span style="color:#4EC9B0;">K</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">Type</span><span style="color:#E6E6E6;">&gt;&gt;()</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">K</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">static</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">deserializationMapper</span><span style="color:#E6E6E6;">()</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObjectDeserializationMapper</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">|</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">undefined</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">public</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">static</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">deserialize</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">Type</span><span style="color:#E6E6E6;">, </span><span style="color:#4EC9B0;">K</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">Type</span><span style="color:#E6E6E6;">&gt; </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">Type</span><span style="color:#E6E6E6;">&gt;&gt;(</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">|</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">undefined</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#9CDCFE;">mapper</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">this</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">deserializationMapper</span><span style="color:#E6E6E6;">(),</span></span>
<span class="line"><span style="color:#E6E6E6;">  )</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">K</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light" tabindex="0"><code><span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ElementalComponentState</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">T</span><span style="color:#002339;">&gt; </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ValueObject</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">T</span><span style="color:#002339;">&gt; {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">static</span><span style="color:#002339;"> </span><span style="color:#7EB233;">defaultState</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">Type</span><span style="color:#002339;">, </span><span style="color:#0444AC;">K</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ValueObject</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">Type</span><span style="color:#002339;">&gt;&gt;()</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">K</span><span style="color:#002339;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">static</span><span style="color:#002339;"> </span><span style="color:#7EB233;">deserializationMapper</span><span style="color:#002339;">()</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ValueObjectDeserializationMapper</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">undefined</span><span style="color:#002339;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">public</span><span style="color:#002339;"> </span><span style="color:#DA5221;">static</span><span style="color:#002339;"> </span><span style="color:#7EB233;">deserialize</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">Type</span><span style="color:#002339;">, </span><span style="color:#0444AC;">K</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ValueObject</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">Type</span><span style="color:#002339;">&gt; </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ValueObject</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">Type</span><span style="color:#002339;">&gt;&gt;(</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#B1108E;">value</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">undefined</span><span style="color:#002339;">,</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#B1108E;">mapper</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#7EB233;">deserializationMapper</span><span style="color:#002339;">(),</span></span>
<span class="line"><span style="color:#002339;">  )</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">K</span><span style="color:#002339;"> {}</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="warning custom-block"><p class="custom-block-title">👺 Overrides for complex state</p><p>It is essential to override the <code>defaultState()</code>, <code>deserializationMapper()</code>, and <code>validate()</code> methods for complex ValueObjects to ensure the state is correctly handled and is consistent.</p></div><h2 id="statefulelementalcomponent" tabindex="-1">StatefulElementalComponent <a class="header-anchor" href="#statefulelementalcomponent" aria-hidden="true">#</a></h2><p>By extending <code>StatefulElementalComponent</code>, your component classes will have access to an internal state object, defined by the type declared in the component definition. Additionally, <code>StatefulElementalComponent</code> extends <code>ElementalComponent</code>, providing all the powerful features and capabilities of <code>ElementalComponent</code>.</p><p>The need to override the <code>deserialize()</code> method only arises when the state is a non-primitive, such as a complex value object, which requires additional steps to deserialize correctly. However, it&#39;s quite simple, all you need to do is override the <code>deserialize()</code> method of your component class and call the correct <code>deserialize()</code> of the state class that extends <code>ElementalComponentState</code>.</p><h3 id="example-1" tabindex="-1">Example <a class="header-anchor" href="#example-1" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">Component</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">ObservedState</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">StatefulElementalComponent</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;@sohailalam2/elemental-web&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">HeroMessage</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">State</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;./State&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">@</span><span style="color:#DCDCAA;">Component</span><span style="color:#E6E6E6;">()</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Hero</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">StatefulElementalComponent</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">State</span><span style="color:#E6E6E6;">&gt; {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">protected</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">render</span><span style="color:#E6E6E6;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">protected</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">deserialize</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">serialized</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">|</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">undefined</span><span style="color:#E6E6E6;">)</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">State</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#C586C0;">return</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">State</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">deserialize</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">HeroMessage</span><span style="color:#E6E6E6;">, </span><span style="color:#4EC9B0;">State</span><span style="color:#E6E6E6;">&gt;(</span><span style="color:#9CDCFE;">serialized</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light" tabindex="0"><code><span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> { </span><span style="color:#2F86D2;">Component</span><span style="color:#002339;">, </span><span style="color:#2F86D2;">ObservedState</span><span style="color:#002339;">, </span><span style="color:#2F86D2;">StatefulElementalComponent</span><span style="color:#002339;"> } </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;@sohailalam2/elemental-web&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> { </span><span style="color:#2F86D2;">HeroMessage</span><span style="color:#002339;">, </span><span style="color:#2F86D2;">State</span><span style="color:#002339;"> } </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;./State&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">@</span><span style="color:#7EB233;">Component</span><span style="color:#002339;">()</span></span>
<span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">Hero</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">StatefulElementalComponent</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">State</span><span style="color:#002339;">&gt; {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#7EB233;">render</span><span style="color:#002339;">() {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#7EB233;">deserialize</span><span style="color:#002339;">(</span><span style="color:#B1108E;">serialized</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">undefined</span><span style="color:#002339;">)</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">State</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">State</span><span style="color:#002339;">.</span><span style="color:#7EB233;">deserialize</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">HeroMessage</span><span style="color:#002339;">, </span><span style="color:#0444AC;">State</span><span style="color:#002339;">&gt;(</span><span style="color:#2F86D2;">serialized</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#002339;">  }</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="statefulelementalcomponentoptions" tabindex="-1">StatefulElementalComponentOptions <a class="header-anchor" href="#statefulelementalcomponentoptions" aria-hidden="true">#</a></h2><p>The constructor offers a configuration option by accepting an optional <code>StatefulElementalComponentOptions</code> object, which builds upon the options provided by <code>ElementalComponentOptions</code> and offers additional options for state management.</p><table><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>state</td><td><code>ElementalComponentState&lt;unknown&gt;</code></td><td><code>StatefulElementalComponent</code> comes equipped with an internal state, defined by the type declared in the component definition. The state can be easily accessed and managed through the <code>this.$state</code> property, making it simple to build dynamic and engaging user interfaces.</td></tr></tbody></table><h2 id="example-2" tabindex="-1">Example <a class="header-anchor" href="#example-2" aria-hidden="true">#</a></h2><p>The following example demonstrates a number of interesting concepts:</p><ul><li>State properties are defined as immutable Value Objects with custom validation</li><li>A stateful component should override the deserialization() method to provide correct deserialization support</li><li>The custom element can be registered together with its template and styles</li><li>The template shows <code>template parts</code> which can be used to provide theme support</li><li>The styles show the usage of <code>::part</code> pseudo-element. Read more <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/::part" target="_blank" rel="noreferrer">here</a></li></ul><p><a href="./../examples/2-stateful-component"><img src="`+s+'" alt="stateful-component-example.png"></a></p><p>Check the <a href="./../examples/2-stateful-component">Stateful Component code example</a> for more details</p>',21),t=[o];function c(r,y,E,i,d,C){return l(),n("div",null,t)}const b=a(e,[["render",c]]);export{u as __pageData,b as default};
