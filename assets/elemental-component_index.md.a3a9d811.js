import{_ as s,c as n,o as a,a as l}from"./app.9eecd835.js";const b=JSON.parse('{"title":"Elemental Component","description":"","frontmatter":{},"headers":[],"relativePath":"elemental-component/index.md"}'),p={name:"elemental-component/index.md"},e=l(`<h1 id="elemental-component" tabindex="-1">Elemental Component <a class="header-anchor" href="#elemental-component" aria-hidden="true">#</a></h1><blockquote><p>Your regular HTMLElement but on steroid \u{1F4AA}</p></blockquote><p>Use the fundamental technologies that you are already familiar with to build for the modern web \u{1F601}</p><h2 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-hidden="true">#</a></h2><ul><li>Create &amp; Register <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements" target="_blank" rel="noreferrer">custom elements</a></li><li>Create &amp; Register an HTML template for the component</li><li>Use the normal DOM or the <a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_shadow_DOM" target="_blank" rel="noreferrer">shadow DOM</a></li><li>Auto discovery of existing HTML template</li><li>Manage event listeners easily</li><li>Dispatch native and <a href="https://developer.mozilla.org/en-US/docs/Web/Events/Creating_and_triggering_events" target="_blank" rel="noreferrer">custom events</a></li></ul><h2 id="class-signature" tabindex="-1">Class Signature <a class="header-anchor" href="#class-signature" aria-hidden="true">#</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#569CD6;">abstract</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ElementalComponent</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">State</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">&gt; </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">HTMLElement</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">implements</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">EventController</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">// child classes must override the render method</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">protected</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">abstract</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">render</span><span style="color:#E6E6E6;">()</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#DA5221;">abstract</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ElementalComponent</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">State</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">&gt; </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">HTMLElement</span><span style="color:#002339;"> </span><span style="color:#DA5221;">implements</span><span style="color:#002339;"> </span><span style="color:#B02767;">EventController</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;">// child classes must override the render method</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#DA5221;">abstract</span><span style="color:#002339;"> </span><span style="color:#7EB233;">render</span><span style="color:#002339;">()</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">void</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><code>ElementalComponent</code> is an abstract class and all your component classes must extend it to get the Power! \u{1F44A} The only hard requirement is to override the <code>render()</code> method which should handle how the DOM gets rendered.</p><p>It is left upto the developer to decide how they want to render the DOM.</p><h2 id="elemental-component-options" tabindex="-1">Elemental Component Options <a class="header-anchor" href="#elemental-component-options" aria-hidden="true">#</a></h2><p>The <code>ElementalComponent</code> <code>super()</code> constructor can accept an optional <code>ElementalComponentOptions</code>.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ElementalComponentOptions</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">   * Each \`ElementalComponent\` by defaults gets an internal \`state\` of type</span></span>
<span class="line"><span style="color:#6A9955;">   * that was declared in the component definition. The state can be access</span></span>
<span class="line"><span style="color:#6A9955;">   * using the \`this.$state\` property.</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">unknown</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">   * An optional \`id\` for the instance of the custom element.</span></span>
<span class="line"><span style="color:#6A9955;">   * An alphanumeric ID will be auto generated if one is not provided here.</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">id</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ElementalComponentId</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">   * By default, an \`ElementalComponent\` is created with a shadowRoot</span></span>
<span class="line"><span style="color:#6A9955;">   * (enclosed in a shadow DOM). However, this configuration property</span></span>
<span class="line"><span style="color:#6A9955;">   * allows us to create an instance without a shadow DOM.</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">noShadow</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">   * By default, an \`ElementalComponent\` is created with a shadow DOM in the</span></span>
<span class="line"><span style="color:#6A9955;">   * &#39;open&#39; mode. However, this configuration property allows us to create one</span></span>
<span class="line"><span style="color:#6A9955;">   * in a &#39;closed&#39; mode.</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">mode</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ShadowRootMode</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">   * A boolean that, when set to true, specifies behavior that mitigates</span></span>
<span class="line"><span style="color:#6A9955;">   * custom element issues around focusability. When a non-focusable part</span></span>
<span class="line"><span style="color:#6A9955;">   * of the shadow DOM is clicked, the first focusable part is given focus,</span></span>
<span class="line"><span style="color:#6A9955;">   * and the shadow host is given any available :focus styling.</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">delegatesFocus</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">   * Event Listeners can be auto registered if they are configured here.</span></span>
<span class="line"><span style="color:#6A9955;">   * Read more in the Controller section of the guide.</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">eventHandlers</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">EventListenerRegistration</span><span style="color:#E6E6E6;">[];</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#0991B6;">interface</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ElementalComponentOptions</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;">/**</span></span>
<span class="line"><span style="color:#357B42;">   * Each \`ElementalComponent\` by defaults gets an internal \`state\` of type</span></span>
<span class="line"><span style="color:#357B42;">   * that was declared in the component definition. The state can be access</span></span>
<span class="line"><span style="color:#357B42;">   * using the \`this.$state\` property.</span></span>
<span class="line"><span style="color:#357B42;">   */</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">state</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">unknown</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;">/**</span></span>
<span class="line"><span style="color:#357B42;">   * An optional \`id\` for the instance of the custom element.</span></span>
<span class="line"><span style="color:#357B42;">   * An alphanumeric ID will be auto generated if one is not provided here.</span></span>
<span class="line"><span style="color:#357B42;">   */</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">id</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ElementalComponentId</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;">/**</span></span>
<span class="line"><span style="color:#357B42;">   * By default, an \`ElementalComponent\` is created with a shadowRoot</span></span>
<span class="line"><span style="color:#357B42;">   * (enclosed in a shadow DOM). However, this configuration property</span></span>
<span class="line"><span style="color:#357B42;">   * allows us to create an instance without a shadow DOM.</span></span>
<span class="line"><span style="color:#357B42;">   */</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">noShadow</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">boolean</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;">/**</span></span>
<span class="line"><span style="color:#357B42;">   * By default, an \`ElementalComponent\` is created with a shadow DOM in the</span></span>
<span class="line"><span style="color:#357B42;">   * &#39;open&#39; mode. However, this configuration property allows us to create one</span></span>
<span class="line"><span style="color:#357B42;">   * in a &#39;closed&#39; mode.</span></span>
<span class="line"><span style="color:#357B42;">   */</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">mode</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ShadowRootMode</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;">/**</span></span>
<span class="line"><span style="color:#357B42;">   * A boolean that, when set to true, specifies behavior that mitigates</span></span>
<span class="line"><span style="color:#357B42;">   * custom element issues around focusability. When a non-focusable part</span></span>
<span class="line"><span style="color:#357B42;">   * of the shadow DOM is clicked, the first focusable part is given focus,</span></span>
<span class="line"><span style="color:#357B42;">   * and the shadow host is given any available :focus styling.</span></span>
<span class="line"><span style="color:#357B42;">   */</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">delegatesFocus</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">boolean</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;">/**</span></span>
<span class="line"><span style="color:#357B42;">   * Event Listeners can be auto registered if they are configured here.</span></span>
<span class="line"><span style="color:#357B42;">   * Read more in the Controller section of the guide.</span></span>
<span class="line"><span style="color:#357B42;">   */</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">eventHandlers</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">EventListenerRegistration</span><span style="color:#002339;">[];</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br></div></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">hasValue</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;@sohailalam2/abu&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">ElementalComponent</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;@sohailalam2/elemental-web&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ButtonCounter</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ElementalComponent</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">number</span><span style="color:#E6E6E6;">&gt; {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">protected</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">connectedCallback</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#569CD6;">super</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">connectedCallback</span><span style="color:#E6E6E6;">();</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#569CD6;">this</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">registerEventListeners</span><span style="color:#E6E6E6;">([{ </span><span style="color:#9CDCFE;">name:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;click&#39;</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">handler:</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">this</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">onClick</span><span style="color:#E6E6E6;"> }]);</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">// Render the element&#39;s HTML content</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">protected</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">render</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#569CD6;">this</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">$root</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">innerHTML</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">\`&lt;button&gt;Click Me (</span><span style="color:#569CD6;">\${</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">$state</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">)&lt;/button&gt;\`</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">// NOTE: its a regular private method that is being used as an event handler</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">private</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">onClick</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#C586C0;">if</span><span style="color:#E6E6E6;"> (</span><span style="color:#DCDCAA;">hasValue</span><span style="color:#E6E6E6;">(</span><span style="color:#569CD6;">this</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">$state</span><span style="color:#E6E6E6;">)) {</span></span>
<span class="line"><span style="color:#E6E6E6;">      </span><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">count</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">this</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">$state</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">+</span><span style="color:#E6E6E6;"> </span><span style="color:#B5CEA8;">1</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">      </span><span style="color:#6A9955;">// use this to update the internal state...</span></span>
<span class="line"><span style="color:#E6E6E6;">      </span><span style="color:#6A9955;">// this is important and this makes the \`$state\` reactive</span></span>
<span class="line"><span style="color:#E6E6E6;">      </span><span style="color:#569CD6;">this</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">updateState</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">count</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">      </span><span style="color:#6A9955;">// dispatch a Custom Event with payload</span></span>
<span class="line"><span style="color:#E6E6E6;">      </span><span style="color:#569CD6;">this</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">raiseEvent</span><span style="color:#E6E6E6;">(</span></span>
<span class="line"><span style="color:#E6E6E6;">        </span><span style="color:#CE9178;">&#39;button-clicked&#39;</span><span style="color:#E6E6E6;">, </span><span style="color:#6A9955;">// event name</span></span>
<span class="line"><span style="color:#E6E6E6;">        </span><span style="color:#569CD6;">true</span><span style="color:#E6E6E6;">, </span><span style="color:#6A9955;">// is a custom event</span></span>
<span class="line"><span style="color:#E6E6E6;">        </span><span style="color:#CE9178;">\`You have clicked my button </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">count</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;"> times\`</span><span style="color:#E6E6E6;">, </span><span style="color:#6A9955;">// some payload</span></span>
<span class="line"><span style="color:#E6E6E6;">      );</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Dont forget to regiser the component...</span></span>
<span class="line"><span style="color:#6A9955;">// only after this it will be made available for instantiation</span></span>
<span class="line"><span style="color:#9CDCFE;">ElementalComponent</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">register</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">ButtonCounter</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> { </span><span style="color:#2F86D2;">hasValue</span><span style="color:#002339;"> } </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;@sohailalam2/abu&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> { </span><span style="color:#2F86D2;">ElementalComponent</span><span style="color:#002339;"> } </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;@sohailalam2/elemental-web&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ButtonCounter</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ElementalComponent</span><span style="color:#002339;">&lt;</span><span style="color:#DC3EB7;">number</span><span style="color:#002339;">&gt; {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#7EB233;">connectedCallback</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">super</span><span style="color:#002339;">.</span><span style="color:#7EB233;">connectedCallback</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#7EB233;">registerEventListeners</span><span style="color:#002339;">([{ name: </span><span style="color:#A44185;">&#39;click&#39;</span><span style="color:#002339;">, handler: </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">onClick</span><span style="color:#002339;"> }]);</span></span>
<span class="line"><span style="color:#002339;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;">// Render the element&#39;s HTML content</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#7EB233;">render</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">$root</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">innerHTML</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#A44185;">\`&lt;button&gt;Click Me (\${</span><span style="color:#000000;">this</span><span style="color:#A44185;">.</span><span style="color:#2F86D2;">$state</span><span style="color:#A44185;">})&lt;/button&gt;\`</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;">// NOTE: its a regular private method that is being used as an event handler</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">private</span><span style="color:#002339;"> </span><span style="color:#7EB233;">onClick</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7EB233;">hasValue</span><span style="color:#002339;">(</span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">$state</span><span style="color:#002339;">)) {</span></span>
<span class="line"><span style="color:#002339;">      </span><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">count</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">$state</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">+</span><span style="color:#002339;"> </span><span style="color:#174781;">1</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">      </span><span style="color:#357B42;">// use this to update the internal state...</span></span>
<span class="line"><span style="color:#002339;">      </span><span style="color:#357B42;">// this is important and this makes the \`$state\` reactive</span></span>
<span class="line"><span style="color:#002339;">      </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#7EB233;">updateState</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">count</span><span style="color:#002339;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">      </span><span style="color:#357B42;">// dispatch a Custom Event with payload</span></span>
<span class="line"><span style="color:#002339;">      </span><span style="color:#000000;">this</span><span style="color:#002339;">.</span><span style="color:#7EB233;">raiseEvent</span><span style="color:#002339;">(</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#A44185;">&#39;button-clicked&#39;</span><span style="color:#002339;">, </span><span style="color:#357B42;">// event name</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#174781;">true</span><span style="color:#002339;">, </span><span style="color:#357B42;">// is a custom event</span></span>
<span class="line"><span style="color:#002339;">        </span><span style="color:#A44185;">\`You have clicked my button \${</span><span style="color:#2F86D2;">count</span><span style="color:#A44185;">} times\`</span><span style="color:#002339;">, </span><span style="color:#357B42;">// some payload</span></span>
<span class="line"><span style="color:#002339;">      );</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"><span style="color:#002339;">  }</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;">// Dont forget to regiser the component...</span></span>
<span class="line"><span style="color:#357B42;">// only after this it will be made available for instantiation</span></span>
<span class="line"><span style="color:#2F86D2;">ElementalComponent</span><span style="color:#002339;">.</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">ButtonCounter</span><span style="color:#002339;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h2 id="using-complex-value-object-as-state" tabindex="-1">Using complex Value Object as State <a class="header-anchor" href="#using-complex-value-object-as-state" aria-hidden="true">#</a></h2><p><a href="https://github.com/sohailalam2/abu" target="_blank" rel="noreferrer">Abu</a> provides <a href="https://sohailalam2.github.io/abu/data-helpers/value-object/index" target="_blank" rel="noreferrer">Value Object</a> that can be used as the <code>state</code> for the component.</p><p>The only thing to remember is to provide a custom <code>deserialie()</code> implementation.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vp-code-dark"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MyValueObjectState</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">interface</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ComplexState</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">vo</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MyValueObjectState</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ComplexStateVO</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ValueObject</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">ComplexState</span><span style="color:#E6E6E6;">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MyValueObjectStateComponent</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ElementalComponent</span><span style="color:#E6E6E6;">&lt;</span><span style="color:#4EC9B0;">ComplexStateVO</span><span style="color:#E6E6E6;">&gt; {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">protected</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">deserialize</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">serializedState</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">|</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">undefined</span><span style="color:#E6E6E6;">)</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ComplexStateVO</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#C586C0;">if</span><span style="color:#E6E6E6;"> (</span><span style="color:#D4D4D4;">!</span><span style="color:#9CDCFE;">serializedState</span><span style="color:#E6E6E6;">) {</span></span>
<span class="line"><span style="color:#E6E6E6;">      </span><span style="color:#C586C0;">return</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">ComplexStateVO</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">({ </span><span style="color:#9CDCFE;">vo:</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">MyValueObjectState</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;undefined&#39;</span><span style="color:#E6E6E6;">) });</span></span>
<span class="line"><span style="color:#E6E6E6;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#C586C0;">return</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">ComplexStateVO</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">deserialize</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">serializedState</span><span style="color:#E6E6E6;">, { </span><span style="color:#9CDCFE;">vo:</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">MyValueObjectState</span><span style="color:#E6E6E6;"> });</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">protected</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">render</span><span style="color:#E6E6E6;">()</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#6A9955;">// do nothing</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">state</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ComplexStateVO</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">ComplexStateVO</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">({ </span><span style="color:#9CDCFE;">vo:</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">MyValueObjectState</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">myComponentState</span><span style="color:#E6E6E6;">) });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">ElementalComponent</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">register</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">MyValueObjectStateComponent</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">div</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">document</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">createElement</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;div&#39;</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">component</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">new</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">MyValueObjectStateComponent</span><span style="color:#E6E6E6;">({ </span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">div</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">appendChild</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">component</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"><span style="color:#DCDCAA;">expect</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">component</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">$state</span><span style="color:#E6E6E6;">).</span><span style="color:#DCDCAA;">toEqual</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">state</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki vp-code-light"><code><span class="line"><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MyValueObjectState</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ValueObject</span><span style="color:#002339;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">interface</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ComplexState</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">vo</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MyValueObjectState</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ComplexStateVO</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ValueObject</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">ComplexState</span><span style="color:#002339;">&gt; {}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MyValueObjectStateComponent</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ElementalComponent</span><span style="color:#002339;">&lt;</span><span style="color:#0444AC;">ComplexStateVO</span><span style="color:#002339;">&gt; {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#7EB233;">deserialize</span><span style="color:#002339;">(</span><span style="color:#B1108E;">serializedState</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">|</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">undefined</span><span style="color:#002339;">)</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ComplexStateVO</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">if</span><span style="color:#002339;"> (</span><span style="color:#7B30D0;">!</span><span style="color:#2F86D2;">serializedState</span><span style="color:#002339;">) {</span></span>
<span class="line"><span style="color:#002339;">      </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ComplexStateVO</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">({ vo: </span><span style="color:#2F86D2;">MyValueObjectState</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">(</span><span style="color:#A44185;">&#39;undefined&#39;</span><span style="color:#002339;">) });</span></span>
<span class="line"><span style="color:#002339;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#7B30D0;">return</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ComplexStateVO</span><span style="color:#002339;">.</span><span style="color:#7EB233;">deserialize</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">serializedState</span><span style="color:#002339;">, { vo: </span><span style="color:#2F86D2;">MyValueObjectState</span><span style="color:#002339;"> });</span></span>
<span class="line"><span style="color:#002339;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#7EB233;">render</span><span style="color:#002339;">()</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">void</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;">// do nothing</span></span>
<span class="line"><span style="color:#002339;">  }</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">state</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">ComplexStateVO</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">ComplexStateVO</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">({ vo: </span><span style="color:#2F86D2;">MyValueObjectState</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">myComponentState</span><span style="color:#002339;">) });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#2F86D2;">ElementalComponent</span><span style="color:#002339;">.</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">MyValueObjectStateComponent</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">div</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">document</span><span style="color:#002339;">.</span><span style="color:#7EB233;">createElement</span><span style="color:#002339;">(</span><span style="color:#A44185;">&#39;div&#39;</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">component</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">MyValueObjectStateComponent</span><span style="color:#002339;">({ </span><span style="color:#2F86D2;">state</span><span style="color:#002339;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#2F86D2;">div</span><span style="color:#002339;">.</span><span style="color:#7EB233;">appendChild</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">component</span><span style="color:#002339;">);</span></span>
<span class="line"><span style="color:#7EB233;">expect</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">component</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">$state</span><span style="color:#002339;">).</span><span style="color:#7EB233;">toEqual</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">state</span><span style="color:#002339;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div>`,18),o=[e];function t(c,r,y,E,i,C){return a(),n("div",null,o)}const d=s(p,[["render",t]]);export{b as __pageData,d as default};
