import{_ as s,c as e,o as n,a}from"./app.17feca57.js";const u=JSON.parse('{"title":"Elemental Component Registry","description":"","frontmatter":{},"headers":[{"level":2,"title":"Register a Component","slug":"register-a-component","link":"#register-a-component","children":[{"level":3,"title":"Method Signature","slug":"method-signature","link":"#method-signature","children":[]},{"level":3,"title":"Usage","slug":"usage","link":"#usage","children":[]}]},{"level":2,"title":"Check if component is registered","slug":"check-if-component-is-registered","link":"#check-if-component-is-registered","children":[{"level":3,"title":"Method Signatures","slug":"method-signatures","link":"#method-signatures","children":[]}]},{"level":2,"title":"Register a Template","slug":"register-a-template","link":"#register-a-template","children":[{"level":3,"title":"Method Signature","slug":"method-signature-1","link":"#method-signature-1","children":[]},{"level":3,"title":"Usage","slug":"usage-1","link":"#usage-1","children":[]}]},{"level":2,"title":"Check if template is registered","slug":"check-if-template-is-registered","link":"#check-if-template-is-registered","children":[{"level":3,"title":"Method Signatures","slug":"method-signatures-1","link":"#method-signatures-1","children":[]}]}],"relativePath":"elemental-component/registry/index.md"}'),l={name:"elemental-component/registry/index.md"},t=a(`<h1 id="elemental-component-registry" tabindex="-1">Elemental Component Registry <a class="header-anchor" href="#elemental-component-registry" aria-hidden="true">#</a></h1><p>The registry implementation that simplifies how we register a custom element or a template. It also exposes a bunch of other helper methods, all of which are public and static.</p><div class="info custom-block"><p class="custom-block-title">Default Prefix</p><p>The <code>ElementalComponentRegistry</code> uses the text <code>el</code> <em>(stands for elemental)</em> as the default prefix for all purposes.</p></div><h2 id="register-a-component" tabindex="-1">Register a Component <a class="header-anchor" href="#register-a-component" aria-hidden="true">#</a></h2><p>All custom elements MUST be registered before they can be instantiated, not doing so will result in an <code>ElementalComponentIsNotRegisteredException</code> exception.</p><div class="warning custom-block"><p class="custom-block-title">\u{1F47A} Register Your Component</p><p>Register your components before you use. Register them even if you only declare them in HTML pages.</p></div><h3 id="method-signature" tabindex="-1">Method Signature <a class="header-anchor" href="#method-signature" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ElementalComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">registerComponent</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HTMLElement</span><span style="color:#89DDFF;">&gt;,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RegistrationOptions</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">\u{1F481} Auto generated ID</p><p>All custom elements when instantiated will get an auto-generated <code>id</code> if one is not provided</p></div><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h3><h4 id="registering-with-default-prefix-el" tabindex="-1">Registering with default prefix <code>el</code> <a class="header-anchor" href="#registering-with-default-prefix-el" aria-hidden="true">#</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// Here ButtonCounter gets registered as \`el-button-counter\`</span></span>
<span class="line"><span style="color:#676E95;">// and ready for use as &lt;el-button-counter&gt;&lt;/el-button-counter&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">ElementalComponentRegistry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">register</span><span style="color:#A6ACCD;">(ButtonCounter)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="registering-with-custom-prefix" tabindex="-1">Registering with custom prefix <a class="header-anchor" href="#registering-with-custom-prefix" aria-hidden="true">#</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// Here ButtonCounter gets registered as \`awesome-button-counter\`</span></span>
<span class="line"><span style="color:#676E95;">// and ready for use as &lt;awesome-button-counter&gt;&lt;/awesome-button-counter&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">ElementalComponentRegistry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">register</span><span style="color:#A6ACCD;">(ButtonCounter</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">prefix</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> ElementalComponentPrefix</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">awesome</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">\u{1F481} Register any <code>HTMLElement</code></p><p>Not so surprising is that you can use the <code>register()</code> method to register <em>any</em> <code>HTMLElement</code> and not necessarily restricted to using <code>ElementalComponent</code> and you will still benefit from its usage \u{1F603}</p></div><h2 id="check-if-component-is-registered" tabindex="-1">Check if component is registered <a class="header-anchor" href="#check-if-component-is-registered" aria-hidden="true">#</a></h2><p><code>ElementalComponentRegistry</code> exposes the following helper methods to check whether a component has been registered or not.</p><h3 id="method-signatures" tabindex="-1">Method Signatures <a class="header-anchor" href="#method-signatures" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ElementalComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// This checks the registry&#39;s storage and will only return a \`true\`</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// if the component was registered using the Registry</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">isComponentRegisteredByClassName</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">className</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// This checks the registry&#39;s storage and will only return a \`true\`</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// if the component was registered using the Registry</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">isComponentRegistered</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HTMLElement</span><span style="color:#89DDFF;">&gt;):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// This directly checks the Browser&#39;s component registry</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// and bypasses the \`ElementalComponentRegistry\`.</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// A component that may have be registered directly using the</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// \`customElements\` API and not with \`ElementalComponentRegistry\`,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// in such cases this will still return \`true\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">isComponentRegisteredByTagName</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tagName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><h2 id="register-a-template" tabindex="-1">Register a Template <a class="header-anchor" href="#register-a-template" aria-hidden="true">#</a></h2><p>There are multiple ways of registering an HTML template for a component:</p><ul><li>You can literally define all templates in your <code>index.html</code> file for instance, using the <code>&lt;template&gt;...&lt;/template&gt;</code> tags</li><li>You can also programmatically use <code>document.createElement()</code> to create the template</li><li>OR you could use <code>ElementalComponentRegistry</code>&#39;s helper method to do the same</li></ul><div class="tip custom-block"><p class="custom-block-title">\u{1F481} Auto Generated Template ID</p><p>All templates registered using <code>ElementalComponentRegistry</code> will end up receiving the same id as the custom component&#39;s tag-name</p></div><h3 id="method-signature-1" tabindex="-1">Method Signature <a class="header-anchor" href="#method-signature-1" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ElementalComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">registerTemplate</span><span style="color:#89DDFF;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HTMLElement</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">template</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#A6ACCD;">prefix</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ElementalComponentPrefix</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="usage-1" tabindex="-1">Usage <a class="header-anchor" href="#usage-1" aria-hidden="true">#</a></h3><h4 id="registering-with-default-prefix-el-1" tabindex="-1">Registering with default prefix <code>el</code> <a class="header-anchor" href="#registering-with-default-prefix-el-1" aria-hidden="true">#</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// Here the given template string gets registered as a \`ButtonCounter\`</span></span>
<span class="line"><span style="color:#676E95;">// template with an id \`el-button-counter\`. You can see that in the beginning</span></span>
<span class="line"><span style="color:#676E95;">// of the document body as \`&lt;template id=&quot;el-button-counter&quot;&gt;...&lt;/template&gt;\`</span></span>
<span class="line"><span style="color:#A6ACCD;">ElementalComponentRegistry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerTemplate</span><span style="color:#A6ACCD;">(ButtonCounter</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">&lt;button&gt;Click Me&lt;/button&gt;</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h4 id="registering-with-custom-prefix-1" tabindex="-1">Registering with custom prefix <a class="header-anchor" href="#registering-with-custom-prefix-1" aria-hidden="true">#</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#676E95;">// Here the given template string gets registered as a \`ButtonCounter\`</span></span>
<span class="line"><span style="color:#676E95;">// template with an id \`awesome-button-counter\`.</span></span>
<span class="line"><span style="color:#676E95;">// You can see that in the beginning of the document body as</span></span>
<span class="line"><span style="color:#676E95;">// \`&lt;template id=&quot;awesome-button-counter&quot;&gt;...&lt;/template&gt;\`</span></span>
<span class="line"><span style="color:#A6ACCD;">ElementalComponentRegistry</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">registerTemplate</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">  ButtonCounter</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">&lt;button&gt;Click Me&lt;/button&gt;</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ElementalComponentPrefix</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">from</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">awesome</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">\u{1F481} Register template for any <code>HTMLElement</code></p><p>Not so surprising is that you can use the <code>registerTemplate()</code> method to register a template string for <em>any</em> <code>HTMLElement</code> and not necessarily restricted to using <code>ElementalComponent</code> and you will still benefit from its usage \u{1F604}</p></div><h2 id="check-if-template-is-registered" tabindex="-1">Check if template is registered <a class="header-anchor" href="#check-if-template-is-registered" aria-hidden="true">#</a></h2><p><code>ElementalComponentRegistry</code> exposes the following helper methods to check whether a component template has been registered or not.</p><h3 id="method-signatures-1" tabindex="-1">Method Signatures <a class="header-anchor" href="#method-signatures-1" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki"><code><span class="line"><span style="color:#89DDFF;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ElementalComponentRegistry</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// This checks the registry&#39;s storage and will only return a \`true\`</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// if the template was registered using the Registry</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">isTemplateRegistered</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">element</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Class</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">HTMLElement</span><span style="color:#89DDFF;">&gt;):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// This checks the DOM directly and bypasses the registry</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// A template that may have be declred in the HTML DOM and not have been</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;">// registered with \`ElementalComponentRegistry\`, this will still return \`true\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">public</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">static</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">isTemplateRegisteredByTagName</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tagName</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div>`,35),p=[t];function o(r,c,i,y,d,m){return n(),e("div",null,p)}const D=s(l,[["render",o]]);export{u as __pageData,D as default};
