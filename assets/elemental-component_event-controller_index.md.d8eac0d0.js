import{_ as s,c as n,o as a,a as l}from"./app.ee22a17e.js";const h=JSON.parse('{"title":"Event Controller","description":"","frontmatter":{},"headers":[],"relativePath":"elemental-component/event-controller/index.md"}'),e={name:"elemental-component/event-controller/index.md"},p=l(`<h1 id="event-controller" tabindex="-1">Event Controller <a class="header-anchor" href="#event-controller" aria-hidden="true">#</a></h1><p><code>EventController</code> is an interface that outlines methods for registering, deregistering and dispatching events, including both regular and custom events. The <code>DefaultEventController</code> class provides a default implementation of this interface, and <code>ElementalComponent</code> currently uses this default implementation. Currently, there is no method for specifying an alternative implementation.</p><h2 id="eventcontroller-interface" tabindex="-1">EventController Interface <a class="header-anchor" href="#eventcontroller-interface" aria-hidden="true">#</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">EventController</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#DCDCAA;">registerEventListeners</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> (</span><span style="color:#9CDCFE;">registrations</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">EventListenerRegistration</span><span style="color:#E6E6E6;">[]) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#DCDCAA;">deregisterEventListeners</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#DCDCAA;">raiseEvent</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> &lt;</span><span style="color:#4EC9B0;">Payload</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">undefined</span><span style="color:#E6E6E6;">&gt;(</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">     * A string with the name of the event. It is case-sensitive.</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#9CDCFE;">isCustom</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">     * The read-only detail property of the CustomEvent interface returns any</span></span>
<span class="line"><span style="color:#6A9955;">     * data passed when initializing the event via this payload property</span></span>
<span class="line"><span style="color:#6A9955;">     */</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#9CDCFE;">payload</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Payload</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">EventOptions</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#E6E6E6;">  ) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#0991B6;">interface</span><span style="color:#002339;"> </span><span style="color:#0444AC;">EventController</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#7EB233;">registerEventListeners</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> (</span><span style="color:#B1108E;">registrations</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">EventListenerRegistration</span><span style="color:#002339;">[]) </span><span style="color:#0991B6;">=&gt;</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">void</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#7EB233;">deregisterEventListeners</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> () </span><span style="color:#0991B6;">=&gt;</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">void</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#7EB233;">raiseEvent</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> &lt;</span><span style="color:#0444AC;">Payload</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">undefined</span><span style="color:#002339;">&gt;(</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * A string with the name of the event. It is case-sensitive.</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#B1108E;">name</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">,</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#B1108E;">isCustom</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">boolean</span><span style="color:#002339;">,</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * The read-only detail property of the CustomEvent interface returns any</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     * data passed when initializing the event via this payload property</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">     */</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#B1108E;">payload</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">Payload</span><span style="color:#002339;">,</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#B1108E;">options</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">EventOptions</span><span style="color:#002339;">,</span></span>
<span class="line"><span style="color:#002339;">  ) </span><span style="color:#0991B6;">=&gt;</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">void</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h3 id="event-options" tabindex="-1">Event Options <a class="header-anchor" href="#event-options" aria-hidden="true">#</a></h3><p><code>EventOptions</code> interface exposes the following properties:</p><table><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>bubbles</td><td>boolean</td><td>A boolean value indicating whether the event bubbles. Defaults to <code>true</code></td></tr><tr><td>cancelable</td><td>boolean</td><td>A boolean value indicating whether the event can be cancelled. Defaults to <code>true</code></td></tr><tr><td>composed</td><td>boolean</td><td>A boolean value indicating whether the event will trigger listeners outside of a shadow root. Defaults to <code>true</code>. Read more <a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/composed" target="_blank" rel="noreferrer">here</a></td></tr></tbody></table><h3 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">MyComponent</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">HTMLElement</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#DCDCAA;">onClickHandler</span><span style="color:#E6E6E6;">() {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#6A9955;">// do nothing</span></span>
<span class="line"><span style="color:#E6E6E6;">  }</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">ElementalComponentRegistry</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">registerComponent</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">MyComponent</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">component</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">new</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">MyComponent</span><span style="color:#E6E6E6;">();</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">controller</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">new</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">DefaultEventController</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">component</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">registrations</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">EventListenerRegistration</span><span style="color:#E6E6E6;">[] </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> [</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">// creates a regular event handler and provide a handler reference</span></span>
<span class="line"><span style="color:#E6E6E6;">  { </span><span style="color:#9CDCFE;">name:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;click&#39;</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">handler:</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">component</span><span style="color:#E6E6E6;">.</span><span style="color:#9CDCFE;">clickHandler</span><span style="color:#E6E6E6;"> },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">// creates a custom event handler and proides a handler has its method name</span></span>
<span class="line"><span style="color:#E6E6E6;">  { </span><span style="color:#9CDCFE;">name:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;custom-click&#39;</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">handlerName:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;onClickHandler&#39;</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">isCustomEvent:</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">true</span><span style="color:#E6E6E6;"> },</span></span>
<span class="line"><span style="color:#E6E6E6;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">controller</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">registerEventListeners</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">registrations</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">component</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">click</span><span style="color:#E6E6E6;">();</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">MyComponent</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">HTMLElement</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#7EB233;">onClickHandler</span><span style="color:#002339;">() {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#357B42;font-style:italic;">// do nothing</span></span>
<span class="line"><span style="color:#002339;">  }</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#2F86D2;">ElementalComponentRegistry</span><span style="color:#002339;">.</span><span style="color:#7EB233;">registerComponent</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">MyComponent</span><span style="color:#002339;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">component</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">MyComponent</span><span style="color:#002339;">();</span></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">controller</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">DefaultEventController</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">component</span><span style="color:#002339;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">registrations</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">EventListenerRegistration</span><span style="color:#002339;">[] </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> [</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;font-style:italic;">// creates a regular event handler and provide a handler reference</span></span>
<span class="line"><span style="color:#002339;">  { name: </span><span style="color:#A44185;">&#39;click&#39;</span><span style="color:#002339;">, handler: </span><span style="color:#2F86D2;">component</span><span style="color:#002339;">.</span><span style="color:#2F86D2;">clickHandler</span><span style="color:#002339;"> },</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;font-style:italic;">// creates a custom event handler and proides a handler has its method name</span></span>
<span class="line"><span style="color:#002339;">  { name: </span><span style="color:#A44185;">&#39;custom-click&#39;</span><span style="color:#002339;">, handlerName: </span><span style="color:#A44185;">&#39;onClickHandler&#39;</span><span style="color:#002339;">, isCustomEvent: </span><span style="color:#174781;">true</span><span style="color:#002339;"> },</span></span>
<span class="line"><span style="color:#002339;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#2F86D2;">controller</span><span style="color:#002339;">.</span><span style="color:#7EB233;">registerEventListeners</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">registrations</span><span style="color:#002339;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#2F86D2;">component</span><span style="color:#002339;">.</span><span style="color:#7EB233;">click</span><span style="color:#002339;">();</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">💁 Register event handlers for any <code>HTMLElement</code></p><p>It&#39;s always fun to discover new things, and you&#39;ll be delighted to know that the <code>registerEventListeners()</code> method can be used to register event listeners on any <code>HTMLElement</code>, not just those that are instances of <code>ElementalComponent</code>. So, don&#39;t be afraid to experiment and see the benefits for yourself! 😃</p></div><h3 id="eventlistenerregistration-interface" tabindex="-1">EventListenerRegistration Interface <a class="header-anchor" href="#eventlistenerregistration-interface" aria-hidden="true">#</a></h3><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark"><code><span class="line"><span style="color:#569CD6;">interface</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">EventListenerRegistration</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">   * A string with the name of the event. It is case-sensitive</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">   * The handler name as text</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">handlerName</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">string</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">   * The handler as a method reference. The callback accepts a single parameter:</span></span>
<span class="line"><span style="color:#6A9955;">   * </span><span style="color:#569CD6;">@param</span><span style="color:#6A9955;"> </span><span style="color:#9CDCFE;">e</span><span style="color:#6A9955;">   an object based on Event describing the event that has occurred,</span></span>
<span class="line"><span style="color:#6A9955;">   *            and it returns nothing.</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#DCDCAA;">handler</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> (</span><span style="color:#9CDCFE;">e</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Event</span><span style="color:#E6E6E6;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">   * The element this listener should be bound to. By default, the listener</span></span>
<span class="line"><span style="color:#6A9955;">   * is bound to the component instance</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">attachTo</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">HTMLElement</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">   * Indicates whether this listener is meant to capture normal events or</span></span>
<span class="line"><span style="color:#6A9955;">   * CustomEvents</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">isCustomEvent</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;">   * </span><span style="color:#569CD6;">@link</span><span style="color:#6A9955;"> https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">options</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#9CDCFE;">capture</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#9CDCFE;">passive</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#9CDCFE;">once</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">boolean</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">    </span><span style="color:#9CDCFE;">signal</span><span style="color:#D4D4D4;">?:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">AbortSignal</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#E6E6E6;">  };</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light"><code><span class="line"><span style="color:#0991B6;">interface</span><span style="color:#002339;"> </span><span style="color:#0444AC;">EventListenerRegistration</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   * A string with the name of the event. It is case-sensitive</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">name</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   * The handler name as text</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">handlerName</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">string</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   * The handler as a method reference. The callback accepts a single parameter:</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   * </span><span style="color:#0991B6;">@param</span><span style="color:#357B42;font-style:italic;"> </span><span style="color:#2F86D2;">e</span><span style="color:#357B42;font-style:italic;">   an object based on Event describing the event that has occurred,</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   *            and it returns nothing.</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#7EB233;">handler</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> (</span><span style="color:#B1108E;">e</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">Event</span><span style="color:#002339;">) </span><span style="color:#0991B6;">=&gt;</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">void</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   * The element this listener should be bound to. By default, the listener</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   * is bound to the component instance</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">attachTo</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">HTMLElement</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   * Indicates whether this listener is meant to capture normal events or</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   * CustomEvents</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">isCustomEvent</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">boolean</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#357B42;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   * </span><span style="color:#0991B6;">@link</span><span style="color:#357B42;font-style:italic;"> https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">options</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">capture</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">boolean</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">passive</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">boolean</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">once</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">boolean</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">    </span><span style="color:#2F86D2;">signal</span><span style="color:#7B30D0;">?:</span><span style="color:#002339;"> </span><span style="color:#0444AC;">AbortSignal</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#002339;">  };</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br></div></div><h3 id="eventlistenerregistration-options" tabindex="-1">EventListenerRegistration Options <a class="header-anchor" href="#eventlistenerregistration-options" aria-hidden="true">#</a></h3><table><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>capture</td><td><code>boolean</code></td><td>A boolean value indicating that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. If not specified, defaults to <code>true</code>.</td></tr><tr><td>passive</td><td><code>boolean</code></td><td>A boolean value that, if true, indicates that the function specified by listener will never call preventDefault(). If a passive listener does call preventDefault(), the user agent will do nothing other than generate a console warning. If not specified, defaults to false – except that in browsers other than Safari and Internet Explorer, defaults to true for the wheel, mousewheel, touchstart and touchmove events.</td></tr><tr><td>once</td><td><code>boolean</code></td><td>A boolean value indicating that the listener should be invoked at most once after being added. If true, the listener would be automatically removed when invoked. If not specified, defaults to false.</td></tr><tr><td>signal</td><td><code>AbortSignal</code></td><td>An AbortSignal. The listener will be removed when the given AbortSignal object&#39;s abort() method is called. If not specified, no AbortSignal is associated with the listener.</td></tr></tbody></table>`,14),o=[p];function t(r,c,i,y,E,d){return a(),n("div",null,o)}const D=s(e,[["render",t]]);export{h as __pageData,D as default};
