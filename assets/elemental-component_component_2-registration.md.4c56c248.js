import{_ as s,c as n,o as a,a as e}from"./app.383c6a50.js";const u=JSON.parse('{"title":"Component Registration","description":"","frontmatter":{},"headers":[],"relativePath":"elemental-component/component/2-registration.md"}'),l={name:"elemental-component/component/2-registration.md"},p=e(`<h1 id="component-registration" tabindex="-1">Component Registration <a class="header-anchor" href="#component-registration" aria-hidden="true">#</a></h1><h2 id="register-your-component" tabindex="-1">Register your Component <a class="header-anchor" href="#register-your-component" aria-hidden="true">#</a></h2><p>Before you can create an instance of your component, you need to register it first. Trust us, you don&#39;t want to forget this step - if you do, you&#39;ll be hit with the dreaded <code>ElementalComponentIsNotRegisteredException</code> exception. Nobody wants that.</p><p>Luckily, <code>ElementalComponent</code> has multiple ways to register your component. Sure, you could use the native custom element API <a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry/define" target="_blank" rel="noreferrer">customElements.define(...)</a> if you really wanted to, but we don&#39;t recommend it. Why? Well, because <code>ElementalComponent</code> has better ways to handle errors, manage prefix alteration, and provide logging for easier debugging. Trust us, your future self will thank you.</p><p>Now, you might be wondering - what&#39;s the better way to register my component, then? We&#39;re glad you asked. Keep reading for a simpler and more elegant solution.</p><div class="tip custom-block"><p class="custom-block-title">üíÅ Auto generated ID</p><p>All components when instantiated will get an auto-generated <code>id</code> if one is not provided, but as always you have the power to configure it.</p></div><h2 id="registrationoptions" tabindex="-1">RegistrationOptions <a class="header-anchor" href="#registrationoptions" aria-hidden="true">#</a></h2><p>Before learning how to register your component, take a look at the following configuration table. These configuration options abstracts away the complexity of using templates and css styles from you. All elemental way of registration supports these <em>optional</em> configuration properties.</p><table><thead><tr><th>Option</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>prefix</td><td><code>ElementalComponentPrefix</code></td><td>The custom prefix for the element. Custom element native API mandates a tag name with dash hence if a prefix is not configured, all elements will be prefixed with <code>el-</code> prefix.</td></tr><tr><td>templateId</td><td><code>string</code></td><td>The ID of the template that should be used as a template for this component. This option allows us to reuse existing templates</td></tr><tr><td>template</td><td><code>string</code></td><td>The template HTML code that should be registered with the component.</td></tr><tr><td>styles</td><td><code>string</code></td><td>CSS styles code that will be registered with the component. If the browser supports <code>adoptedStyleSheets</code> then we will cache the styles and they will be intelligently used by all component instances without duplication thereby saving precious parsing time.</td></tr><tr><td>extends</td><td><code>string</code></td><td>üë∫ <code>deprecated</code> DO NOT use! <br> <br> The extension of native HTML components is not supported by Safari. The team has decided to not support it in the future either. So use this functionality with caution.</td></tr></tbody></table><h3 id="configure-a-default-custom-prefix" tabindex="-1">Configure a default custom prefix <a class="header-anchor" href="#configure-a-default-custom-prefix" aria-hidden="true">#</a></h3><p>As noted above, custom element native API mandates a tag name with dash hence if a prefix is not configured, all <code>ElementalComponent</code> components will be prefixed with <code>el-</code> prefix. However, this can be overridden globally or per component basis to suit your preferences.</p><p>The below code shows how to globally override the prefix to your custom value. Subsequently, any additional components registered will utilize the newly set default prefix without the need for explicit inclusion during the registration process.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">ElementalComponentRegistry</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">setDefaultPrefix</span><span style="color:#E6E6E6;">(</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">ElementalComponentPrefix</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;my&#39;</span><span style="color:#E6E6E6;">), </span><span style="color:#6A9955;">// prefix will now become \`my-\`</span></span>
<span class="line"><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light" tabindex="0"><code><span class="line"><span style="color:#2F86D2;">ElementalComponentRegistry</span><span style="color:#002339;">.</span><span style="color:#7EB233;">setDefaultPrefix</span><span style="color:#002339;">(</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#2F86D2;">ElementalComponentPrefix</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">(</span><span style="color:#A44185;">&#39;my&#39;</span><span style="color:#002339;">), </span><span style="color:#357B42;font-style:italic;">// prefix will now become \`my-\`</span></span>
<span class="line"><span style="color:#002339;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="component-registration-process" tabindex="-1">Component Registration Process <a class="header-anchor" href="#component-registration-process" aria-hidden="true">#</a></h2><h3 id="using-component-decorator" tabindex="-1">Using <code>@Component()</code> Decorator <a class="header-anchor" href="#using-component-decorator" aria-hidden="true">#</a></h3><p>The simplest and straight forward way to register your component is by using the <code>@Component(options)</code> class decorator.</p><h4 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-hidden="true">#</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">Component</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">ElementalComponent</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;@sohailalam2/elemental-web&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// Here Paragraph gets registered as \`el-paragraph\`</span></span>
<span class="line"><span style="color:#6A9955;">// and ready for use as &lt;el-paragraph&gt;&lt;/el-paragraph&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">@</span><span style="color:#DCDCAA;">Component</span><span style="color:#E6E6E6;">()</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Paragraph</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ElementalComponent</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">protected</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">render</span><span style="color:#E6E6E6;">()</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// register with additional options</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// templates and styles need to be strings it doesnt matter how you get them</span></span>
<span class="line"><span style="color:#6A9955;">// but if you are using Vite, you can simply import them like so</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">styles</span><span style="color:#E6E6E6;"> </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;./styles.css?inline&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">template</span><span style="color:#E6E6E6;"> </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;./template.html?raw&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E6E6E6;">@</span><span style="color:#DCDCAA;">Component</span><span style="color:#E6E6E6;">({ </span><span style="color:#9CDCFE;">template</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">styles</span><span style="color:#E6E6E6;"> })</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Hero</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ElementalComponent</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#569CD6;">protected</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">render</span><span style="color:#E6E6E6;">()</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light" tabindex="0"><code><span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> { </span><span style="color:#2F86D2;">Component</span><span style="color:#002339;">, </span><span style="color:#2F86D2;">ElementalComponent</span><span style="color:#002339;"> } </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;@sohailalam2/elemental-web&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// Here Paragraph gets registered as \`el-paragraph\`</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// and ready for use as &lt;el-paragraph&gt;&lt;/el-paragraph&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">@</span><span style="color:#7EB233;">Component</span><span style="color:#002339;">()</span></span>
<span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">Paragraph</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ElementalComponent</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#7EB233;">render</span><span style="color:#002339;">()</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">void</span><span style="color:#002339;"> {}</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// register with additional options</span></span>
<span class="line"></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// templates and styles need to be strings it doesnt matter how you get them</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// but if you are using Vite, you can simply import them like so</span></span>
<span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">styles</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;./styles.css?inline&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">template</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;./template.html?raw&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#002339;">@</span><span style="color:#7EB233;">Component</span><span style="color:#002339;">({ </span><span style="color:#2F86D2;">template</span><span style="color:#002339;">, </span><span style="color:#2F86D2;">styles</span><span style="color:#002339;"> })</span></span>
<span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">Hero</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ElementalComponent</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#DA5221;">protected</span><span style="color:#002339;"> </span><span style="color:#7EB233;">render</span><span style="color:#002339;">()</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">void</span><span style="color:#002339;"> {}</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h3 id="using-the-javascript-api" tabindex="-1">Using the JavaScript API <a class="header-anchor" href="#using-the-javascript-api" aria-hidden="true">#</a></h3><h3 id="usage-1" tabindex="-1">Usage <a class="header-anchor" href="#usage-1" aria-hidden="true">#</a></h3><h4 id="registering-with-default-prefix-el" tabindex="-1">Registering with default prefix <code>el</code> <a class="header-anchor" href="#registering-with-default-prefix-el" aria-hidden="true">#</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Here ButtonCounter gets registered as \`el-button-counter\`</span></span>
<span class="line"><span style="color:#6A9955;">// and ready for use as &lt;el-button-counter&gt;&lt;/el-button-counter&gt;</span></span>
<span class="line"><span style="color:#9CDCFE;">ElementalComponent</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">register</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">ButtonCounter</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light" tabindex="0"><code><span class="line"><span style="color:#357B42;font-style:italic;">// Here ButtonCounter gets registered as \`el-button-counter\`</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// and ready for use as &lt;el-button-counter&gt;&lt;/el-button-counter&gt;</span></span>
<span class="line"><span style="color:#2F86D2;">ElementalComponent</span><span style="color:#002339;">.</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">ButtonCounter</span><span style="color:#002339;">);</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="registering-with-custom-prefix" tabindex="-1">Registering with custom prefix <a class="header-anchor" href="#registering-with-custom-prefix" aria-hidden="true">#</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Here ButtonCounter gets registered as \`awesome-button-counter\`</span></span>
<span class="line"><span style="color:#6A9955;">// and ready for use as &lt;awesome-button-counter&gt;&lt;/awesome-button-counter&gt;</span></span>
<span class="line"><span style="color:#9CDCFE;">ElementalComponent</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">register</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">ButtonCounter</span><span style="color:#E6E6E6;">, {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">prefix:</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">ElementalComponentPrefix</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;awesome&#39;</span><span style="color:#E6E6E6;">),</span></span>
<span class="line"><span style="color:#E6E6E6;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light" tabindex="0"><code><span class="line"><span style="color:#357B42;font-style:italic;">// Here ButtonCounter gets registered as \`awesome-button-counter\`</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// and ready for use as &lt;awesome-button-counter&gt;&lt;/awesome-button-counter&gt;</span></span>
<span class="line"><span style="color:#2F86D2;">ElementalComponent</span><span style="color:#002339;">.</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">ButtonCounter</span><span style="color:#002339;">, {</span></span>
<span class="line"><span style="color:#002339;">  prefix: </span><span style="color:#2F86D2;">ElementalComponentPrefix</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">(</span><span style="color:#A44185;">&#39;awesome&#39;</span><span style="color:#002339;">),</span></span>
<span class="line"><span style="color:#002339;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="template-registration-process" tabindex="-1">Template Registration Process <a class="header-anchor" href="#template-registration-process" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">üíÅ Auto Generated Template ID</p><p>All templates registered here will end up receiving the same id as the component&#39;s tag-name</p></div><h3 id="usage-2" tabindex="-1">Usage <a class="header-anchor" href="#usage-2" aria-hidden="true">#</a></h3><h4 id="registering-with-default-prefix-el-1" tabindex="-1">Registering with default prefix <code>el</code> <a class="header-anchor" href="#registering-with-default-prefix-el-1" aria-hidden="true">#</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Here the given template string gets registered as a \`ButtonCounter\`</span></span>
<span class="line"><span style="color:#6A9955;">// template with an id \`el-button-counter\`. You can see that in the beginning</span></span>
<span class="line"><span style="color:#6A9955;">// of the document body as \`&lt;template id=&quot;el-button-counter&quot;&gt;...&lt;/template&gt;\`</span></span>
<span class="line"><span style="color:#9CDCFE;">ElementalComponent</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">register</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">ButtonCounter</span><span style="color:#E6E6E6;">, {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">template:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">\`&lt;button&gt;Click Me&lt;/button&gt;\`</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#E6E6E6;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light" tabindex="0"><code><span class="line"><span style="color:#357B42;font-style:italic;">// Here the given template string gets registered as a \`ButtonCounter\`</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// template with an id \`el-button-counter\`. You can see that in the beginning</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// of the document body as \`&lt;template id=&quot;el-button-counter&quot;&gt;...&lt;/template&gt;\`</span></span>
<span class="line"><span style="color:#2F86D2;">ElementalComponent</span><span style="color:#002339;">.</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">ButtonCounter</span><span style="color:#002339;">, {</span></span>
<span class="line"><span style="color:#002339;">  template: </span><span style="color:#A44185;">\`&lt;button&gt;Click Me&lt;/button&gt;\`</span><span style="color:#002339;">,</span></span>
<span class="line"><span style="color:#002339;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h4 id="registering-with-custom-prefix-1" tabindex="-1">Registering with custom prefix <a class="header-anchor" href="#registering-with-custom-prefix-1" aria-hidden="true">#</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#6A9955;">// Here the given template string gets registered as a \`ButtonCounter\`</span></span>
<span class="line"><span style="color:#6A9955;">// template with an id \`awesome-button-counter\`.</span></span>
<span class="line"><span style="color:#6A9955;">// You can see that in the beginning of the document body as</span></span>
<span class="line"><span style="color:#6A9955;">// \`&lt;template id=&quot;awesome-button-counter&quot;&gt;...&lt;/template&gt;\`</span></span>
<span class="line"><span style="color:#9CDCFE;">ElementalComponent</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">register</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">ButtonCounter</span><span style="color:#E6E6E6;">, {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">template:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">\`&lt;button&gt;Click Me&lt;/button&gt;\`</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">prefix:</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">ElementalComponentPrefix</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">from</span><span style="color:#E6E6E6;">(</span><span style="color:#CE9178;">&#39;awesome&#39;</span><span style="color:#E6E6E6;">),</span></span>
<span class="line"><span style="color:#E6E6E6;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light" tabindex="0"><code><span class="line"><span style="color:#357B42;font-style:italic;">// Here the given template string gets registered as a \`ButtonCounter\`</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// template with an id \`awesome-button-counter\`.</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// You can see that in the beginning of the document body as</span></span>
<span class="line"><span style="color:#357B42;font-style:italic;">// \`&lt;template id=&quot;awesome-button-counter&quot;&gt;...&lt;/template&gt;\`</span></span>
<span class="line"><span style="color:#2F86D2;">ElementalComponent</span><span style="color:#002339;">.</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">ButtonCounter</span><span style="color:#002339;">, {</span></span>
<span class="line"><span style="color:#002339;">  template: </span><span style="color:#A44185;">\`&lt;button&gt;Click Me&lt;/button&gt;\`</span><span style="color:#002339;">,</span></span>
<span class="line"><span style="color:#002339;">  prefix: </span><span style="color:#2F86D2;">ElementalComponentPrefix</span><span style="color:#002339;">.</span><span style="color:#7EB233;">from</span><span style="color:#002339;">(</span><span style="color:#A44185;">&#39;awesome&#39;</span><span style="color:#002339;">),</span></span>
<span class="line"><span style="color:#002339;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">üíÅ <code>this.$template</code></p><p>When a template is registered or detected by ElementalComponent during component instantiation, it will be cloned and attached to the component&#39;s inner DOM.</p><p>The template can be accessed through the read-only instance property <code>$template</code>.</p></div><h4 id="link-a-different-template" tabindex="-1">Link a different template <a class="header-anchor" href="#link-a-different-template" aria-hidden="true">#</a></h4><p>Assume that a template with the id for example, &quot;custom-template&quot; is already present in the DOM, it can be utilized during the instantiation of an elemental component by passing the <code>templateId</code> parameter. The component will then use the specified template at runtime.</p><p>If a template is not found registered by that id, an exception <code>ElementalComponentNoSuchTemplateFoundException</code> will be thrown.</p><div class="warning custom-block"><p class="custom-block-title">It&#39;s a reference not a copy</p><p>When a <code>templateId</code> is supplied, and a corresponding template is found within the DOM, ElementalComponent will utilize the content of that template directly, as opposed to creating a new copy.</p><p>This means, you will not see any new template being registered to the DOM with id as the component&#39;s tag-name.</p></div><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">ElementalComponent</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">register</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">ButtonCounter</span><span style="color:#E6E6E6;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">myButton</span><span style="color:#E6E6E6;"> </span><span style="color:#D4D4D4;">=</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">new</span><span style="color:#E6E6E6;"> </span><span style="color:#DCDCAA;">ButtonCounter</span><span style="color:#E6E6E6;">({</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">templateId:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">\`some-template-id\`</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#E6E6E6;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light" tabindex="0"><code><span class="line"><span style="color:#2F86D2;">ElementalComponent</span><span style="color:#002339;">.</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">ButtonCounter</span><span style="color:#002339;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#0991B6;">const</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">myButton</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">=</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">new</span><span style="color:#002339;"> </span><span style="color:#7EB233;">ButtonCounter</span><span style="color:#002339;">({</span></span>
<span class="line"><span style="color:#002339;">  templateId: </span><span style="color:#A44185;">\`some-template-id\`</span><span style="color:#002339;">,</span></span>
<span class="line"><span style="color:#002339;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>The <code>templateId</code> can be passed during the registration process to use as the template for the element. In this scenario, the template will be copied and assigned the id of the element&#39;s <code>tagName</code>.</p><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#9CDCFE;">ElementalComponent</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">register</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">ButtonCounter</span><span style="color:#E6E6E6;">, {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#9CDCFE;">templateId:</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">\`some-template-id\`</span><span style="color:#E6E6E6;">,</span></span>
<span class="line"><span style="color:#E6E6E6;">});</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light" tabindex="0"><code><span class="line"><span style="color:#2F86D2;">ElementalComponent</span><span style="color:#002339;">.</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">ButtonCounter</span><span style="color:#002339;">, {</span></span>
<span class="line"><span style="color:#002339;">  templateId: </span><span style="color:#A44185;">\`some-template-id\`</span><span style="color:#002339;">,</span></span>
<span class="line"><span style="color:#002339;">});</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h4 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-hidden="true">#</a></h4><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki slack-dark vp-code-dark" tabindex="0"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> { </span><span style="color:#9CDCFE;">ElementalComponent</span><span style="color:#E6E6E6;"> } </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;@sohailalam2/elemental-web&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">styles</span><span style="color:#E6E6E6;"> </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;./styles.scss?inline&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#E6E6E6;"> </span><span style="color:#9CDCFE;">template</span><span style="color:#E6E6E6;"> </span><span style="color:#C586C0;">from</span><span style="color:#E6E6E6;"> </span><span style="color:#CE9178;">&#39;./template.html?raw&#39;</span><span style="color:#E6E6E6;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">class</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">Magician</span><span style="color:#E6E6E6;"> </span><span style="color:#569CD6;">extends</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">ElementalComponent</span><span style="color:#E6E6E6;"> {</span></span>
<span class="line"><span style="color:#E6E6E6;">  </span><span style="color:#DCDCAA;">render</span><span style="color:#E6E6E6;">()</span><span style="color:#D4D4D4;">:</span><span style="color:#E6E6E6;"> </span><span style="color:#4EC9B0;">void</span><span style="color:#E6E6E6;"> {}</span></span>
<span class="line"><span style="color:#E6E6E6;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">ElementalComponent</span><span style="color:#E6E6E6;">.</span><span style="color:#DCDCAA;">register</span><span style="color:#E6E6E6;">(</span><span style="color:#9CDCFE;">Magician</span><span style="color:#E6E6E6;">, { </span><span style="color:#9CDCFE;">template</span><span style="color:#E6E6E6;">, </span><span style="color:#9CDCFE;">styles</span><span style="color:#E6E6E6;"> });</span></span>
<span class="line"></span></code></pre><pre class="shiki slack-ochin vp-code-light" tabindex="0"><code><span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> { </span><span style="color:#2F86D2;">ElementalComponent</span><span style="color:#002339;"> } </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;@sohailalam2/elemental-web&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">styles</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;./styles.scss?inline&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"><span style="color:#7B30D0;">import</span><span style="color:#002339;"> </span><span style="color:#2F86D2;">template</span><span style="color:#002339;"> </span><span style="color:#7B30D0;">from</span><span style="color:#002339;"> </span><span style="color:#A44185;">&#39;./template.html?raw&#39;</span><span style="color:#002339;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#7B30D0;">export</span><span style="color:#002339;"> </span><span style="color:#0991B6;">class</span><span style="color:#002339;"> </span><span style="color:#0444AC;">Magician</span><span style="color:#002339;"> </span><span style="color:#DA5221;">extends</span><span style="color:#002339;"> </span><span style="color:#B02767;">ElementalComponent</span><span style="color:#002339;"> {</span></span>
<span class="line"><span style="color:#002339;">  </span><span style="color:#7EB233;">render</span><span style="color:#002339;">()</span><span style="color:#7B30D0;">:</span><span style="color:#002339;"> </span><span style="color:#DC3EB7;">void</span><span style="color:#002339;"> {}</span></span>
<span class="line"><span style="color:#002339;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#2F86D2;">ElementalComponent</span><span style="color:#002339;">.</span><span style="color:#7EB233;">register</span><span style="color:#002339;">(</span><span style="color:#2F86D2;">Magician</span><span style="color:#002339;">, { </span><span style="color:#2F86D2;">template</span><span style="color:#002339;">, </span><span style="color:#2F86D2;">styles</span><span style="color:#002339;"> });</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>Now that you know how to register your components, take a look at in the next chapter how you can instantiate and use them.</p>`,42),o=[p];function t(r,c,i,y,d,E){return a(),n("div",null,o)}const h=s(l,[["render",t]]);export{u as __pageData,h as default};
